#include <iostream>
#include <fstream>
#include <string>
#include <streambuf>

#define STB_IMAGE_IMPLEMENTATION
#include "../include/stb_image.h"

#include "renderer.h"

Renderer::Renderer() {}

int Renderer::init(void) {
    /*
        Setup Window (GLFW)
    */

    /* Initialize the library */
    if (!glfwInit()) {
        std::cout << "Couldn't init GLFW" << std::endl;
        return -1;
    }

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    /* Create a windowed mode window and its OpenGL context */
    Renderer::window = glfwCreateWindow(640, 320, "Chip8", NULL, NULL);
    if (!Renderer::window) {
        std::cout << "Couldn't create window" << std::endl;
        glfwTerminate();
        return -1;
    }

    glfwSwapInterval(1);

    /* Make the window's context current */
    glfwMakeContextCurrent(Renderer::window);

    GLenum err = glewInit();
    if (GLEW_OK != err) {
        /* Problem: glewInit failed, something is seriously wrong. */
        fprintf(stderr, "Error: %s\n", glewGetErrorString(err));
    }
    fprintf(stdout, "Status: Using GLEW %s\n", glewGetString(GLEW_VERSION));

    /*
        Compile Shaders
    */

    std::string vertex;
    std::string fragment;
    if(readShaderFromFile(vertex, "src/shaders/default.vert")) {
        fprintf(stderr, "Couldn't read vertex shader!");
    }
    if(readShaderFromFile(fragment, "src/shaders/default.frag")) {
        fprintf(stderr, "Couldn't read fragment shader!");
    }

    unsigned int vertexShader = glCreateShader(GL_VERTEX_SHADER);
    const char* vert = vertex.c_str();
    glShaderSource(vertexShader, 1, &vert, NULL);
    glCompileShader(vertexShader);

    unsigned int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    readShaderFromFile(vertex, "src/shaders/default.vert");
    const char* frag = fragment.c_str();
    glShaderSource(fragmentShader, 1, &frag, NULL);
    glCompileShader(fragmentShader);

    Renderer::program = glCreateProgram();
    glAttachShader(Renderer::program, vertexShader);
    glAttachShader(Renderer::program, fragmentShader);
    glLinkProgram(Renderer::program);

    glUseProgram(Renderer::program);

    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    /*
        Load in texture data
    */
    int width, height, nrChannels;
    unsigned char *data = stbi_load("src/container.jpg", &width, &height, &nrChannels, 0);

    /*
        Setup OpenGL
    */

    // Vertex Array VAO
    glGenVertexArrays(1, &(Renderer::VAO));
    glBindVertexArray((Renderer::VAO));

    // Vertex Buffer VBO
    glGenBuffers(1, &(Renderer::VBO));
    glBindBuffer(GL_ARRAY_BUFFER, (Renderer::VBO));
    glBufferData(GL_ARRAY_BUFFER, sizeof(Renderer::vertices), Renderer::vertices, GL_STATIC_DRAW);

    // Element Buffer EBO
    glGenBuffers(1, &(Renderer::EBO));
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, (Renderer::EBO));
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(Renderer::indices), Renderer::indices, GL_STATIC_DRAW);

    // Load in dev image, image will need to be generated by the emulator eventually
    glGenTextures(1, &texture);
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, texture);
    // set the texture wrapping parameters
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE); // note that we set the container wrapping method to GL_CLAMP_TO_EDGE
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    // set texture filtering parameters
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST); // set texture filtering to nearest neighbor to clearly see the texels/pixels
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
    glGenerateMipmap(GL_TEXTURE_2D);


    // position attribute
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);
    // color attribute
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);
    // texture coord attribute
    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
    glEnableVertexAttribArray(2);


    stbi_image_free(data);

    return 0;
}

void Renderer::processInput(GLFWwindow *local_window) {
    if (glfwGetKey(local_window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(local_window, true);
}

int Renderer::readShaderFromFile(std::string &shader, std::string shaderFileName) {
    std::ifstream file(shaderFileName);
    if (!file.is_open()) {
        std::cerr << "Couldn't load vertex shader" << std::endl;
        return 1;
    }

    std::string fileContent((std::istreambuf_iterator<char>(file)),
                             std::istreambuf_iterator<char>());

    shader = fileContent.c_str();

    file.close();
    return 0;
}

// Render loop, to be ran everytime the scene updates
int Renderer::render() {
    if (!glfwWindowShouldClose(Renderer::window)) {
        processInput(Renderer::window);

        // Bind needed data
        glUseProgram(program);
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, texture);
        glBindVertexArray(VAO);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, Renderer::EBO);

        // Render
        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);
        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

        glfwSwapBuffers(Renderer::window);
        glfwPollEvents();

        // Cleanup, best to make sure nothing from a past frame is there next time we render
        glBindVertexArray(0);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
        glUseProgram(0);

        return 0;
    }
    else {
        glfwTerminate();
        return 1;
    }
}